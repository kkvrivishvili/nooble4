networks:
  nooble-network:
    driver: bridge

services:
  redis_database:
    networks:
      - nooble-network
    build:
      context: ./redis_database
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  qdrant_database:
    networks:
      - nooble-network
    image: qdrant/qdrant:v1.7.4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage

  postgres:
    networks:
      - nooble-network
    image: postgres:15-alpine
    container_name: nooble4-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Configuración de autenticación - en desarrollo permitir todo localmente
      POSTGRES_HOST_AUTH_METHOD: trust
      # Usuario y contraseña para Kong
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_database/init:/docker-entrypoint-initdb.d
      - ./postgres_database/pg_hba.conf:/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    # Configuración de rendimiento para desarrollo
    command: >
      postgres 
      -c 'max_connections=1000' 
      -c 'shared_buffers=256MB' 
      -c 'work_mem=16MB'
      -c 'maintenance_work_mem=64MB'
      -c 'wal_buffers=7864kB'
      -c 'checkpoint_completion_target=0.9'
      -c 'default_statistics_target=100'
      -c 'random_page_cost=1.1'
      -c 'effective_io_concurrency=200'
      -c 'effective_cache_size=768MB'
      -c 'log_statement=all'  # Solo para desarrollo
      -c 'log_connections=on'
      -c 'log_disconnections=on'
      -c 'log_duration=on'
      -c 'log_min_duration_statement=0'
      -c 'log_line_prefix=''%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '''

  query_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./query_service/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - redis_database
      - qdrant_database
    volumes:
      - ./common:/app/common
    env_file:
      - ./.env

  agent_orchestrator_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./agent_orchestrator_service/Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - redis_database
    volumes:
      - ./common:/app/common
    env_file:
      - ./.env

  ingestion_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./ingestion_service/Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - redis_database
      - qdrant_database
    volumes:
      - ./common:/app/common
    env_file:
      - ./.env

  conversation_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./conversation_service/Dockerfile
    ports:
      - "8004:8004"
    depends_on:
      - redis_database
    volumes:
      - ./common:/app/common
    env_file:
      - ./.env

  agent_execution_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./agent_execution_service/Dockerfile
    ports:
      - "8005:8005"
    depends_on:
      - redis_database
    volumes:
      - ./common:/app/common
    env_file:
      - ./.env

  embedding_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./embedding_service/Dockerfile
    ports:
      - "8006:8006"
    depends_on:
      - redis_database
    volumes:
      - ./common:/app/common
    env_file:
      - ./.env

  keycloak:
    networks:
      - nooble-network
    build:
      context: ./keycloak_auth
      dockerfile: Dockerfile
    container_name: nooble4-keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=dev-file
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak_auth/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - keycloak_data:/opt/keycloak/data

  kong-migrations:
    build:
      context: ./kong_gateway
      dockerfile: kong.Dockerfile
    container_name: nooble4-kong-migrations
    networks:
      - nooble-network
    command: [
      "sh", "-c",
      "echo 'Esperando a que PostgreSQL esté listo...' && \
       until pg_isready -h postgres -U ${KONG_PG_USER} -d ${KONG_PG_DATABASE}; do echo 'Esperando a PostgreSQL...'; sleep 2; done && \
       echo 'PostgreSQL listo, ejecutando migraciones de Kong...' && \
       kong migrations bootstrap && \
       kong migrations up && \
       echo 'Migraciones de Kong completadas con éxito'"
    ]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Configuración de la base de datos
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_PORT: ${KONG_PG_PORT}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_SSL: 'off'  # Desactivar SSL para desarrollo
      
      # Configuración de red
      KONG_PROXY_LISTEN: '0.0.0.0:8000, 0.0.0.0:8443 ssl'
      KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
      
      # Configuración de logs
      KONG_LOG_LEVEL: debug
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      
      # Configuración adicional
      KONG_LUA_PACKAGE_PATH: '/opt/kong/?.lua;/opt/kong/?/init.lua;;'
      KONG_NGINX_DAEMON: 'off'
      KONG_NGINX_USER: 'kong'
      KONG_NGINX_WORKER_PROCESSES: 'auto'
      
      # Configuración de tiempo de espera
      KONG_DB_UPDATE_FREQUENCY: 5
      KONG_DB_UPDATE_PROPAGATION: 10
      KONG_DB_CACHE_WARMUP_ENTRIES: 100
    restart: on-failure
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kong:
    build:
      context: ./kong_gateway
      dockerfile: kong.Dockerfile
    container_name: nooble4-kong-gateway
    networks:
      - nooble-network
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    environment:
      # Configuración de la base de datos
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_SSL: 'off'  # Desactivar SSL para desarrollo
      
      # Configuración del proxy
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      
      # Configuración de red
      KONG_PROXY_LISTEN: '0.0.0.0:8000, 0.0.0.0:8443 ssl'
      KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
      
      # Configuración de seguridad (solo para desarrollo)
      KONG_ADMIN_GUI_AUTH: basic-auth
      KONG_ADMIN_GUI_SESSION_CONF: '{"secret":"your-secret-key"}'
      
      # Optimizaciones de rendimiento
      KONG_NGINX_WORKER_PROCESSES: 'auto'
      KONG_NGINX_WORKER_CONNECTIONS: '4096'
      KONG_MEM_CACHE_SIZE: '128m'
      
      # Habilitar plugins
      KONG_PLUGINS: bundled
      
      # Configuración de logs detallada
      KONG_LOG_LEVEL: debug
    ports:
      - "8081:8000" # Proxy HTTP
      - "8443:8443" # Proxy HTTPS
      - "8011:8001" # Admin API
      - "8454:8444" # Admin API SSL
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    env_file:
      - ./.env

  konga:
    build:
      context: ./kong_gateway
      dockerfile: konga.Dockerfile
    container_name: nooble4-konga
    networks:
      - nooble-network
    depends_on:
      kong:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: development
      KONGA_KONG_URL: ${KONGA_KONG_URL}
      KONGA_DATABASE_URI: ${KONGA_DATABASE_URI}
      KONGA_HOOK_TIMEOUT: 120000
      KONGA_HOOK_RETRY: 5
    ports:
      - "1337:1337"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nooble4-pgadmin
    networks:
      - nooble-network
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  redis_data:
  qdrant_data:
  postgres_data:
  keycloak_data:
  pgadmin_data: