networks:
  nooble-network:
    driver: bridge

services:
  # Redis Database
  redis:
    container_name: nooble4-redis
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MAX_MEMORY=${REDIS_MAX_MEMORY:-256mb}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - nooble-network

  # Qdrant Vector Database
  qdrant:
    container_name: nooble4-qdrant
    image: qdrant/qdrant:${QDRANT_VERSION:-v1.7.4}
    ports:
      - "${QDRANT_PORT}:6333"
      - "${QDRANT_HTTP_PORT}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - QDRANT_ALLOW_RECOVERY_MODE=${QDRANT_ALLOW_RECOVERY_MODE:-true}
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:6333/readyz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - nooble-network

  postgres:
    networks:
      - nooble-network
    image: postgres:15-alpine
    container_name: nooble4-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Configuraci칩n de autenticaci칩n - en desarrollo permitir todo localmente
      POSTGRES_HOST_AUTH_METHOD: trust
      # Usuario y contrase침a para Kong
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_database/init:/docker-entrypoint-initdb.d
      - ./postgres_database/pg_hba.conf:/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    # Configuraci칩n de rendimiento para desarrollo
    command: >
      postgres 
      -c 'max_connections=1000' 
      -c 'shared_buffers=256MB' 
      -c 'work_mem=16MB'
      -c 'maintenance_work_mem=64MB'
      -c 'wal_buffers=7864kB'
      -c 'checkpoint_completion_target=0.9'
      -c 'default_statistics_target=100'
      -c 'random_page_cost=1.1'
      -c 'effective_io_concurrency=200'
      -c 'effective_cache_size=768MB'
      -c 'log_statement=all'
      -c 'log_connections=on'
      -c 'log_disconnections=on'
      -c 'log_duration=on'
      -c 'log_min_duration_statement=0'
      -c 'log_line_prefix=''%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '''

  query_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./query_service/Dockerfile
    container_name: nooble4-query-service
    ports:
      - "${QUERY_SERVICE_PORT:-8000}:8000"
    depends_on:
      redis_database:
        condition: service_healthy
      qdrant_database:
        condition: service_healthy
    volumes:
      - ./common:/app/common
      - ./query_service:/app
    env_file:
      - ./.env
    environment:
      - SERVICE_NAME=query_service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # agent_orchestrator_service:
  #   networks:
  #     - nooble-network
  #   build:
  #     context: .
  #     dockerfile: ./agent_orchestrator_service/Dockerfile
  #   container_name: nooble4-agent-orchestrator
  #   ports:
  #     - "${AGENT_ORCHESTRATOR_PORT:-8001}:8001"
  #   depends_on:
  #     redis_database:
  #       condition: service_healthy
  #   volumes:
  #     - ./common:/app/common
  #     - ./agent_orchestrator_service:/app
  #   environment:
  #     - SERVICE_NAME=agent_orchestrator
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s

  ingestion_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./ingestion_service/Dockerfile
    container_name: nooble4-ingestion-service
    ports:
      - "${INGESTION_SERVICE_PORT:-8002}:8002"
    depends_on:
      redis_database:
        condition: service_healthy
      qdrant_database:
        condition: service_healthy
    volumes:
      - ./common:/app/common
      - ./ingestion_service:/app
    environment:
      - SERVICE_NAME=ingestion_service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # conversation_service:
  #   networks:
  #     - nooble-network
  #   build:
  #     context: .
  #     dockerfile: ./conversation_service/Dockerfile
  #   container_name: nooble4-conversation-service
  #   ports:
  #     - "${CONVERSATION_SERVICE_PORT:-8004}:8004"
  #   depends_on:
  #     redis_database:
  #       condition: service_healthy
  #   volumes:
  #     - ./common:/app/common
  #     - ./conversation_service:/app
  #   environment:
  #     - SERVICE_NAME=conversation_service
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s

  agent_execution_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./agent_execution_service/Dockerfile
    ports:
      - "8005:8005"
    depends_on:
      - redis_database
    volumes:
      - ./common:/app/common
    env_file:
      - ./.env

  # agent_management_service:
  #   networks:
  #     - nooble-network
  #   build:
  #     context: .
  #     dockerfile: ./agent_management_service/Dockerfile
  #   container_name: nooble4-agent-management
  #   ports:
  #     - "${AGENT_MANAGEMENT_PORT:-8003}:8003"
  #   depends_on:
  #     redis_database:
  #       condition: service_healthy
  #   volumes:
  #     - ./common:/app/common
  #     - ./agent_management_service:/app
  #   environment:
  #     - SERVICE_NAME=agent_management
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s

  embedding_service:
    networks:
      - nooble-network
    build:
      context: .
      dockerfile: ./embedding_service/Dockerfile
    container_name: nooble4-embedding-service
    ports:
      - "${EMBEDDING_SERVICE_PORT:-8006}:8006"
    depends_on:
      redis_database:
        condition: service_healthy
    volumes:
      - ./common:/app/common
      - ./embedding_service:/app
    environment:
      - SERVICE_NAME=embedding_service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  kong-migrations:
    build:
      context: ./kong_gateway
      dockerfile: kong.Dockerfile
    container_name: nooble4-kong-migrations
    command: kong migrations bootstrap -v
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=${POSTGRES_HOST:-postgres}
      - KONG_PG_PORT=${POSTGRES_PORT:-5432}
      - KONG_PG_USER=${KONG_PG_USER:-kong}
      - KONG_PG_PASSWORD=${KONG_PG_PASSWORD:-kong}
      - KONG_PG_DATABASE=${KONG_PG_DATABASE:-kong}
      - KONG_PG_SSL=off
      - KONG_PG_SSL_VERIFY=false
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    networks:
      - nooble-network

  kong:
    build:
      context: ./kong_gateway
      dockerfile: kong.Dockerfile
    container_name: nooble4-kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=${POSTGRES_HOST:-postgres}
      - KONG_PG_PORT=${POSTGRES_PORT:-5432}
      - KONG_PG_USER=${KONG_PG_USER:-kong}
      - KONG_PG_PASSWORD=${KONG_PG_PASSWORD:-kong}
      - KONG_PG_DATABASE=${KONG_PG_DATABASE:-kong}
      - KONG_PG_SSL=off
      - KONG_PG_SSL_VERIFY=false
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_PROXY_LISTEN=0.0.0.0:${KONG_PROXY_PORT:-8000}, 0.0.0.0:${KONG_PROXY_SSL_PORT:-8443} ssl
      - KONG_ADMIN_LISTEN=0.0.0.0:${KONG_ADMIN_PORT:-8001}, 0.0.0.0:${KONG_ADMIN_SSL_PORT:-8444} ssl
      - KONG_ADMIN_GUI_AUTH=basic-auth
      - KONG_ENFORCE_RBAC=on
      - KONG_ADMIN_GUI_SESSION_CONF={}
      - KONG_PLUGINS=bundled,keycloak
      - KONG_NGINX_DAEMON=off
    ports:
      - "${KONG_PROXY_PORT:-8000}:8000"
      - "${KONG_PROXY_SSL_PORT:-8443}:8443"
      - "${KONG_ADMIN_PORT:-8001}:8001"
      - "${KONG_ADMIN_SSL_PORT:-8444}:8444"
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      keycloak:
        condition: service_healthy
    networks:
      - nooble-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  konga:
    build:
      context: ./kong_gateway
      dockerfile: konga.Dockerfile
    container_name: nooble4-konga
    networks:
      - nooble-network
    depends_on:
      kong:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - KONGA_KONG_URL=${KONGA_KONG_URL:-http://kong:8001}
      - KONGA_DATABASE_URI=postgresql://${KONGA_DB_USER:-konga}:${KONGA_DB_PASSWORD:-konga}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${KONGA_DB_DATABASE:-konga}
      - KONGA_HOOK_TIMEOUT=120000
      - KONGA_HOOK_RETRY=5
      - KONGA_ADMIN_EMAIL=${KONGA_ADMIN_EMAIL:-admin@nooble4.local}
      - KONGA_ADMIN_PASSWORD=${KONGA_ADMIN_PASSWORD:-admin1234}
    ports:
      - "1337:1337"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  keycloak:
    networks:
      - nooble-network
    image: quay.io/keycloak/keycloak:23.0.1
    container_name: nooble4-keycloak
    command: ["start-dev"]
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${KEYCLOAK_DB:-keycloak}
      - KC_DB_USERNAME=${KEYCLOAK_DB_USER:-${POSTGRES_USER:-postgres}}
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD:-${POSTGRES_PASSWORD:-postgres}}
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=${KEYCLOAK_HOSTNAME:-keycloak}
      - KC_HTTP_PORT=${KEYCLOAK_PORT:-8080}
      - KC_HTTP_RELATIVE_PATH=/
      - KC_PROXY=edge
      - KC_HOSTNAME_STRICT=false
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - keycloak_data:/opt/keycloak/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nooble4-pgadmin
    networks:
      - nooble-network
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@nooble4.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: ${PGADMIN_PORT:-5050}
    ports:
      - "${PGADMIN_PORT:-5050}:5050"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  redis_data:
  qdrant_data:
  postgres_data:
  keycloak_data:
  pgadmin_data: