'use client'

import { forwardRef, useState, useEffect } from 'react'
import { Input } from './Input'
import { Label } from './Label'
import type { InputProps } from './Input'

export interface SlugInputProps extends Omit<InputProps, 'value' | 'onChange'> {
  value?: string
  onChange?: (value: string) => void
  label?: string
  error?: string
  autoGenerate?: boolean
  prefix?: string
  sourceValue?: string
}

export const SlugInput = forwardRef<HTMLInputElement, SlugInputProps>(({
  value = '',
  onChange,
  label = 'URL Slug',
  error,
  autoGenerate = true,
  prefix,
  sourceValue,
  disabled,
  ...props
}, ref) => {
  const [localValue, setLocalValue] = useState(value)
  const [isAutoGenerated, setIsAutoGenerated] = useState(autoGenerate)

  useEffect(() => {
    if (sourceValue && isAutoGenerated) {
      const slug = generateSlug(sourceValue)
      setLocalValue(slug)
      onChange?.(slug)
    }
  }, [sourceValue, isAutoGenerated, onChange])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (isAutoGenerated) {
      setIsAutoGenerated(false)
    }
    
    const slug = generateSlug(e.target.value)
    setLocalValue(slug)
    onChange?.(slug)
  }

  return (
    <div className="space-y-2">
      <Label error={!!error}>{label}</Label>
      <div className="flex items-center space-x-1">
        {prefix && (
          <span className="text-sm text-muted-foreground/75 whitespace-nowrap">
            {prefix}/
          </span>
        )}
        <Input
          ref={ref}
          value={localValue}
          onChange={handleChange}
          error={error}
          disabled={disabled}
          {...props}
        />
      </div>
    </div>
  )
})

SlugInput.displayName = 'SlugInput'

// Utility function to generate URL-friendly slugs
function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .substring(0, 50)
} 