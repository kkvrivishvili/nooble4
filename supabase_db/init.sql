-- ----------------------------------------------------
-- Script de Inicialización de Supabase para Nooble AI
-- Versión Completa - Generado a partir del análisis del Frontend
-- ----------------------------------------------------

-- ========= SECCIÓN 1: TIPOS PERSONALIZADOS (ENUMS) =========

-- Eliminar tipos si existen para permitir la re-ejecución del script
DROP TYPE IF EXISTS public.org_role CASCADE;
DROP TYPE IF EXISTS public.user_role CASCADE;
DROP TYPE IF EXISTS public.event_type CASCADE;

-- Rol para miembros dentro de una organización
CREATE TYPE public.org_role AS ENUM ('owner', 'admin', 'member');

-- Rol para usuarios a nivel de sistema
CREATE TYPE public.user_role AS ENUM ('user', 'admin', 'super_admin');

-- Tipo de evento para la tabla de auditoría
CREATE TYPE public.event_type AS ENUM (
    'user_signed_up',
    'user_logged_in',
    'user_logged_out',
    'user_profile_updated',
    'org_created',
    'org_updated',
    'org_deleted',
    'member_invited',
    'invite_accepted',
    'member_removed',
    'role_changed',
    'ownership_transfer'
);


-- ========= SECCIÓN 2: TABLAS PRINCIPALES =========

-- Tabla de perfiles de usuario, extiende auth.users
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name text,
    avatar_url text,
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';

-- Tabla de organizaciones (inquilinos)
CREATE TABLE IF NOT EXISTS public.organizations (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    avatar_url text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.organizations IS 'Represents a multi-tenant organization or workspace.';

-- Tabla de miembros de la organización (une usuarios y organizaciones)
CREATE TABLE IF NOT EXISTS public.organization_members (
    org_id uuid NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role public.org_role NOT NULL DEFAULT 'member',
    joined_at timestamptz DEFAULT now(),
    PRIMARY KEY (org_id, user_id)
);
COMMENT ON TABLE public.organization_members IS 'Junction table linking users to organizations with specific roles.';

-- Tabla de invitaciones a organizaciones
CREATE TABLE IF NOT EXISTS public.organization_invites (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    org_id uuid NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    invited_by uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    email text NOT NULL,
    role public.org_role NOT NULL DEFAULT 'member',
    token text NOT NULL UNIQUE,
    expires_at timestamptz NOT NULL DEFAULT (now() + interval '7 days'),
    accepted_at timestamptz,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.organization_invites IS 'Stores pending invitations for users to join organizations.';


-- ========= SECCIÓN 3: TABLAS DE SOPORTE Y AUDITORÍA =========

-- Tabla de roles a nivel de sistema
CREATE TABLE IF NOT EXISTS public.roles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    system_role public.user_role NOT NULL DEFAULT 'user',
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.roles IS 'Assigns system-level roles to users (e.g., for an admin panel).';

-- Tabla de actividad de usuario
CREATE TABLE IF NOT EXISTS public.user_activity (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    action_type text NOT NULL,
    metadata jsonb,
    ip_address inet,
    user_agent text,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.user_activity IS 'Logs significant user actions for auditing and analytics.';

-- Tabla para límites de velocidad (Rate Limiting)
CREATE TABLE IF NOT EXISTS public.rate_limits (
    id text PRIMARY KEY, -- Formato: user_id:action_type
    user_id uuid NOT NULL,
    action_type text NOT NULL,
    window_start timestamptz NOT NULL DEFAULT now(),
    request_count integer NOT NULL DEFAULT 1
);
COMMENT ON TABLE public.rate_limits IS 'Tracks requests for rate limiting purposes.';

-- Tabla para caché de estadísticas de miembros
CREATE TABLE IF NOT EXISTS public.organization_member_stats_cache (
    org_id uuid PRIMARY KEY REFERENCES public.organizations(id) ON DELETE CASCADE,
    stats jsonb,
    role_distribution_history jsonb,
    cache_version integer DEFAULT 1,
    last_updated timestamptz DEFAULT now()
);
COMMENT ON TABLE public.organization_member_stats_cache IS 'Caches computed statistics for organization dashboards.';

-- Tabla de eventos para auditoría detallada
CREATE TABLE IF NOT EXISTS public.events (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL, -- El usuario puede ser eliminado, pero el evento permanece
    org_id uuid REFERENCES public.organizations(id) ON DELETE SET NULL,
    event_type public.event_type NOT NULL,
    metadata jsonb,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.events IS 'Logs detailed audit trail events across the system.';


-- ========= SECCIÓN 3.5: FUNCIONES AUXILIARES PARA RLS =========

-- Función auxiliar para políticas RLS: verificar si un usuario es miembro de una organización
CREATE OR REPLACE FUNCTION public.is_org_member(p_org_id uuid, p_user_id uuid)
RETURNS boolean AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM public.organization_members
        WHERE org_id = p_org_id AND user_id = p_user_id
    );
END;
$$ LANGUAGE plpgsql SECURITY INVOKER STABLE;

-- Función auxiliar para políticas RLS: verificar si un usuario es miembro con roles específicos
CREATE OR REPLACE FUNCTION public.is_org_member_with_roles(p_org_id uuid, p_user_id uuid, p_roles public.org_role[])
RETURNS boolean AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM public.organization_members
        WHERE org_id = p_org_id AND user_id = p_user_id AND role = ANY(p_roles)
    );
END;
$$ LANGUAGE plpgsql SECURITY INVOKER STABLE;


-- ========= SECCIÓN 4: POLÍTICAS DE SEGURIDAD (ROW LEVEL SECURITY) =========

-- Habilitar RLS en todas las tablas
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_invites ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_activity ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;

-- Políticas para perfiles
DROP POLICY IF EXISTS "Users can view their own profile." ON public.profiles;
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = user_id);
DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = user_id);
DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Políticas para organizaciones
DROP POLICY IF EXISTS "Members can view their own organizations." ON public.organizations;
CREATE POLICY "Members can view their own organizations." ON public.organizations FOR SELECT USING (
    public.is_org_member(id, auth.uid())
);
DROP POLICY IF EXISTS "Owners can update their organizations." ON public.organizations;
CREATE POLICY "Owners can update their organizations." ON public.organizations FOR UPDATE USING (
    public.is_org_member_with_roles(id, auth.uid(), ARRAY['owner']::public.org_role[])
);

-- Políticas para miembros de la organización
DROP POLICY IF EXISTS "Members can view other members of their own organizations." ON public.organization_members;
CREATE POLICY "Members can view other members of their own organizations." ON public.organization_members FOR SELECT USING (
    public.is_org_member(org_id, auth.uid())
);

-- Políticas para roles del sistema
DROP POLICY IF EXISTS "Users can view their own system role." ON public.roles;
CREATE POLICY "Users can view their own system role." ON public.roles FOR SELECT USING (auth.uid() = user_id);

-- Políticas para eventos
DROP POLICY IF EXISTS "Admins can view all events in their organizations." ON public.events;
CREATE POLICY "Admins can view all events in their organizations." ON public.events FOR SELECT USING (
    public.is_org_member_with_roles(org_id, auth.uid(), ARRAY['admin', 'owner']::public.org_role[])
);


-- ========= SECCIÓN 5: ALMACENAMIENTO (STORAGE) =========

-- Crear el bucket para avatares si no existe
-- Nota: La creación de buckets se realiza a través de la API o la UI de Supabase,
-- pero se incluye aquí como documentación.

INSERT INTO storage.buckets (id, name, public)
VALUES ('avatars', 'avatars', true)
ON CONFLICT (id) DO NOTHING;

-- Políticas de acceso para el bucket de avatares
DROP POLICY IF EXISTS "Avatar images are publicly accessible." ON storage.objects;
CREATE POLICY "Avatar images are publicly accessible."
ON storage.objects FOR SELECT
USING ( bucket_id = 'avatars' );

DROP POLICY IF EXISTS "Anyone can upload an avatar." ON storage.objects;
CREATE POLICY "Anyone can upload an avatar."
ON storage.objects FOR INSERT
WITH CHECK ( bucket_id = 'avatars' );

DROP POLICY IF EXISTS "Users can update their own avatars." ON storage.objects;
CREATE POLICY "Users can update their own avatars."
ON storage.objects FOR UPDATE
USING ( auth.uid() = owner )
WITH CHECK ( bucket_id = 'avatars' );


-- ========= SECCIÓN 6: FUNCIONES DE BASE DE DATOS =========

-- Función para crear una organización y asignar al propietario
DROP FUNCTION IF EXISTS public.create_organization_with_owner(text, text, text, uuid);
CREATE OR REPLACE FUNCTION public.create_organization_with_owner(
    p_name text,
    p_slug text,
    p_avatar_url text,
    p_user_id uuid
)
RETURNS public.organizations AS $$
DECLARE
    new_org public.organizations;
BEGIN
    -- Insertar la nueva organización y devolver la fila completa
    INSERT INTO public.organizations (name, slug, avatar_url)
    VALUES (p_name, p_slug, p_avatar_url)
    RETURNING * INTO new_org;

    -- Asignar al usuario como propietario de la nueva organización
    INSERT INTO public.organization_members (org_id, user_id, role)
    VALUES (new_org.id, p_user_id, 'owner');

    -- Devolver la organización recién creada
    RETURN new_org;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION public.create_organization_with_owner(text, text, text, uuid) IS 'Atomically creates an organization and assigns the creator as the owner.';


-- Función para aceptar una invitación y unirse a una organización
CREATE OR REPLACE FUNCTION public.accept_invite(
    p_invite_id uuid,
    p_user_id uuid
)
RETURNS void AS $$
DECLARE
    v_org_id uuid;
    v_role public.org_role;
BEGIN
    -- Obtener los detalles de la invitación
    SELECT org_id, role INTO v_org_id, v_role
    FROM public.organization_invites
    WHERE id = p_invite_id;

    -- Si no se encuentra la invitación, lanzar un error
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Invite not found';
    END IF;

    -- Añadir al usuario a la tabla de miembros
    -- Si ya es miembro, ON CONFLICT DO NOTHING lo ignora silenciosamente
    INSERT INTO public.organization_members (org_id, user_id, role)
    VALUES (v_org_id, p_user_id, v_role)
    ON CONFLICT (org_id, user_id) DO NOTHING;

    -- Marcar la invitación como aceptada (el frontend la borra después)
    UPDATE public.organization_invites
    SET accepted_at = now()
    WHERE id = p_invite_id;

END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION public.accept_invite(uuid, uuid) IS 'Adds a user to an organization based on an invite and marks it as accepted.';


-- Función para transferir la propiedad de una organización
CREATE OR REPLACE FUNCTION public.transfer_org_ownership(
    p_org_slug text,
    p_current_owner_id uuid,
    p_new_owner_id uuid
)
RETURNS void AS $$
DECLARE
    v_org_id uuid;
    is_current_owner boolean;
    is_new_owner_member boolean;
BEGIN
    -- Obtener el ID de la organización a partir del slug
    SELECT id INTO v_org_id FROM public.organizations WHERE slug = p_org_slug;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Organization not found';
    END IF;

    -- Verificar que el usuario actual es el propietario
    SELECT EXISTS (
        SELECT 1 FROM public.organization_members
        WHERE org_id = v_org_id AND user_id = p_current_owner_id AND role = 'owner'
    ) INTO is_current_owner;

    IF NOT is_current_owner THEN
        RAISE EXCEPTION 'Only the current owner can transfer ownership.';
    END IF;

    -- Verificar que el nuevo propietario es un miembro de la organización
    SELECT EXISTS (
        SELECT 1 FROM public.organization_members
        WHERE org_id = v_org_id AND user_id = p_new_owner_id
    ) INTO is_new_owner_member;

    IF NOT is_new_owner_member THEN
        RAISE EXCEPTION 'New owner must be a member of the organization.';
    END IF;

    -- Iniciar transacción
    -- Degradar al propietario actual a 'admin'
    UPDATE public.organization_members
    SET role = 'admin'
    WHERE org_id = v_org_id AND user_id = p_current_owner_id;

    -- Ascender al nuevo propietario a 'owner'
    UPDATE public.organization_members
    SET role = 'owner'
    WHERE org_id = v_org_id AND user_id = p_new_owner_id;

END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION public.transfer_org_ownership(text, uuid, uuid) IS 'Atomically transfers ownership of an organization from one member to another.';


-- Función para obtener métricas de análisis para el panel de administración
CREATE OR REPLACE FUNCTION public.get_analytics_metrics()
RETURNS TABLE(
    total_users bigint,
    total_organizations bigint,
    total_memberships bigint,
    pending_invites bigint
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        (SELECT count(*) FROM auth.users) AS total_users,
        (SELECT count(*) FROM public.organizations) AS total_organizations,
        (SELECT count(*) FROM public.organization_members) AS total_memberships,
        (SELECT count(*) FROM public.organization_invites WHERE accepted_at IS NULL) AS pending_invites;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION public.get_analytics_metrics() IS 'Retrieves key metrics for the admin analytics dashboard.';


-- ========= FIN DEL SCRIPT =========