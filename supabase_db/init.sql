-- ----------------------------------------------------
-- Script de Inicialización de Supabase para Nooble AI
-- Generado a partir del análisis del Frontend
-- ----------------------------------------------------

-- ========= SECCIÓN 1: TIPOS PERSONALIZADOS (ENUMS) =========

-- Eliminar tipos si existen para permitir la re-ejecución del script
DROP TYPE IF EXISTS public.org_role CASCADE;
DROP TYPE IF EXISTS public.user_role CASCADE;

-- Rol para miembros dentro de una organización
CREATE TYPE public.org_role AS ENUM ('owner', 'admin', 'member');

-- Rol para usuarios a nivel de sistema
CREATE TYPE public.user_role AS ENUM ('user', 'admin', 'super_admin');


-- ========= SECCIÓN 2: TABLAS PRINCIPALES =========

-- Tabla de perfiles de usuario, extiende auth.users
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name text,
    avatar_url text,
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';

-- Tabla de organizaciones (inquilinos)
CREATE TABLE IF NOT EXISTS public.organizations (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    slug text NOT NULL UNIQUE,
    avatar_url text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.organizations IS 'Represents a multi-tenant organization or workspace.';

-- Tabla de miembros de la organización (une usuarios y organizaciones)
CREATE TABLE IF NOT EXISTS public.organization_members (
    org_id uuid NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role public.org_role NOT NULL DEFAULT 'member',
    joined_at timestamptz DEFAULT now(),
    PRIMARY KEY (org_id, user_id)
);
COMMENT ON TABLE public.organization_members IS 'Junction table linking users to organizations with specific roles.';

-- Tabla de invitaciones a organizaciones
CREATE TABLE IF NOT EXISTS public.organization_invites (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    org_id uuid NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    invited_by uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    email text NOT NULL,
    role public.org_role NOT NULL DEFAULT 'member',
    token text NOT NULL UNIQUE,
    expires_at timestamptz NOT NULL DEFAULT (now() + interval '7 days'),
    accepted_at timestamptz,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.organization_invites IS 'Stores pending invitations for users to join organizations.';


-- ========= SECCIÓN 3: TABLAS DE SOPORTE Y AUDITORÍA =========

-- Tabla de roles a nivel de sistema
CREATE TABLE IF NOT EXISTS public.roles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    role public.user_role NOT NULL DEFAULT 'user',
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.roles IS 'Assigns system-level roles to users (e.g., for an admin panel).';

-- Tabla de actividad de usuario
CREATE TABLE IF NOT EXISTS public.user_activity (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    action_type text NOT NULL,
    metadata jsonb,
    ip_address inet,
    user_agent text,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.user_activity IS 'Logs significant user actions for auditing and analytics.';

-- Tabla para límites de velocidad (Rate Limiting)
CREATE TABLE IF NOT EXISTS public.rate_limits (
    id text PRIMARY KEY, -- Formato: user_id:action_type
    user_id uuid NOT NULL,
    action_type text NOT NULL,
    window_start timestamptz NOT NULL DEFAULT now(),
    request_count integer NOT NULL DEFAULT 1
);
COMMENT ON TABLE public.rate_limits IS 'Tracks requests for rate limiting purposes.';

-- Tabla para caché de estadísticas de miembros
CREATE TABLE IF NOT EXISTS public.organization_member_stats_cache (
    org_id uuid PRIMARY KEY REFERENCES public.organizations(id) ON DELETE CASCADE,
    stats jsonb,
    role_distribution_history jsonb,
    cache_version integer DEFAULT 1,
    last_updated timestamptz DEFAULT now()
);
COMMENT ON TABLE public.organization_member_stats_cache IS 'Caches computed statistics for organization dashboards.';


-- ========= SECCIÓN 4: POLÍTICAS DE SEGURIDAD (ROW LEVEL SECURITY) =========

-- Habilitar RLS en todas las tablas
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_invites ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_activity ENABLE ROW LEVEL SECURITY;

-- Políticas para perfiles
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = user_id);

-- Políticas para organizaciones
CREATE POLICY "Members can view their own organizations." ON public.organizations FOR SELECT USING (
    id IN (
        SELECT org_id FROM public.organization_members WHERE user_id = auth.uid()
    )
);
CREATE POLICY "Owners can update their organizations." ON public.organizations FOR UPDATE USING (
    id IN (
        SELECT org_id FROM public.organization_members WHERE user_id = auth.uid() AND role = 'owner'
    )
);

-- Políticas para miembros de la organización
CREATE POLICY "Members can view other members of their own organizations." ON public.organization_members FOR SELECT USING (
    org_id IN (
        SELECT org_id FROM public.organization_members WHERE user_id = auth.uid()
    )
);

-- ========= SECCIÓN 5: ALMACENAMIENTO (STORAGE) =========

-- Crear el bucket para avatares si no existe
-- Nota: La creación de buckets se realiza a través de la API o la UI de Supabase,
-- pero se incluye aquí como documentación.

INSERT INTO storage.buckets (id, name, public)
VALUES ('avatars', 'avatars', true)
ON CONFLICT (id) DO NOTHING;

-- Políticas de acceso para el bucket de avatares
CREATE POLICY "Avatar images are publicly accessible."
ON storage.objects FOR SELECT
USING ( bucket_id = 'avatars' );

CREATE POLICY "Anyone can upload an avatar."
ON storage.objects FOR INSERT
WITH CHECK ( bucket_id = 'avatars' );

CREATE POLICY "Users can update their own avatars."
ON storage.objects FOR UPDATE
USING ( auth.uid() = owner )
WITH CHECK ( bucket_id = 'avatars' );

-- ========= FIN DEL SCRIPT =========